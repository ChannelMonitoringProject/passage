services:
  postgres:
    container_name: postgres
    hostname: postgres
    image: postgres:latest
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    container_name: redis
    hostname: redis
    image: redis/redis-stack
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]

  kafka:
    image: apache/kafka:latest
    container_name: kafka
    hostname: kafka
    
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENERS: CONTROLLER://localhost:9091,HOST://0.0.0.0:9092,DOCKER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: HOST://localhost:9092,DOCKER://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,DOCKER:PLAINTEXT,HOST:PLAINTEXT


      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9091

      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER

      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
    ports:
      - 9091:9091
      - 9092:9092
      - 9093:9093

    healthcheck:
        test: "/opt/kafka/bin/kafka-cluster.sh cluster-id --bootstrap-server kafka:9093 || exit 1"
        interval: 30s
        timeout: 10s
        retries: 5


  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
      KAFKA_CLUSTERS_0_NAME: ais
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9093
    # volumes:
    #   - ~/kui/config.yml:/etc/kafkaui/dynamic_config.yaml


  kafka-producers:
    hostname: kafka-producers
    container_name: kafka-producers
    build: 
      context: ./
      dockerfile: ./producers/Dockerfile
    environment:
      KAFKA_HOST: kafka:9093
      LOGLEVEL: DEBUG
      AIS_STREAM_API_KEY: ${AIS_STREAM_API_KEY}
      AIS_STREAM_ARENA: ${AIS_STREAM_ARENA}
      KAFKA_AIS_TOPIC: ${KAFKA_AIS_TOPIC}
    depends_on:
      kafka:
        condition: service_healthy

  kafka-redis-consumers:
    hostname: kafka-redis-consumers
    container_name: kafka-redis-consumers
    build: 
      context: ./
      dockerfile: ./consumers/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      KAFKA_HOST: kafka:9093
      REDIS_HOST: redis
      LOGLEVEL: DEBUG
      KAFKA_AIS_TOPIC: ${KAFKA_AIS_TOPIC}
      REDIS_BOAT_POSITION_REPORT_TOPIC: ${REDIS_BOAT_POSITION_REPORT_TOPIC}


#   zookeeper:
#     image: confluentinc/cp-zookeeper:latest
#     environment:
#       ZOOKEEPER_CLIENT_PORT: 2181
#       ZOOKEEPER_TICK_TIME: 2000
# 
#   kafka:
#     image: confluentinc/cp-kafka:latest
#     depends_on:
#       - zookeeper
#     ports:
#       - "9092:9092"
#     environment:
#       KAFKA_BROKER_ID: 1
#       KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#       KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
#       KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
# 

  airflow:
    image: apache/airflow:2.8.3-python3.10
    depends_on:
      - postgres
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./airflow.cfg:/opt/airflow/airflow.cfg
      - ./requirements-airflow.txt:/requirements-airflow.txt
    ports:
      - "9081:8080"
    command: >
      bash -c "\
        pip install -r /requirements-airflow.txt && \
        airflow db migrate && \
        airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com && \
        airflow webserver & \
        airflow scheduler"

volumes:
  postgres_data:
